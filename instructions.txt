Your job is to take a few of the famous ciphers listed here and implement them in Python so you can quickly encode and decode secret messages.
Each cipher should be created as a Python class and each has to expose two methods: encrypt and decrypt. Each of these methods should take a single
string to be encoded or decoded and should return the properly encoded or decoded version of the string according to the cipher.

Some of these ciphers might require other attributes to be set, but I'll leave that up to you to decide.

----------------
Before you start

To prepare for this project you'll need to make sure you complete and understand these steps.

 3 steps
Done - 1. Have a GitHub account and know how to create a new repository and upload files to it. As with the previous projects, you'll submit your finished working using GitHub.
Done - 2. If you need a reminder on how to use GitHub and GitHub desktop to create a new repository check out the workshop 'Share Your Projects wIth GitHub Desktop' in the Project Resources.
Done - 3. Download the project files. We've supplied a basic project with the Caesar Cipher implemented as an example.

-----------------
Project Instructions

To complete this project, follow the instructions below. If you get stuck, ask a question in the community.

----8 steps----

DONE 1. Choose at least three basic ciphers from the following list to implement encrypting and decrypting abilities.
  Alberti cipher
  Affine cipher
COMPLETE - Atbash cipher
  Polybius square cipher
COMPLETE - Transposition cipher
  ADFGVX cipher
  Bifid cipher
COMPLETE - Keyword cipher
  Hill cipher

DONE 2. Provide a command line menu providing an option to either encrypt or decrypt a value and then a sub menu with
   a list of implemented ciphers.
DONE 3. Write a separate class, which inherits from cipher, and implements encrypt and decrypt functionality for each
   of your chosen ciphers.
DONE 4. Prompt the user for input to encrypt or decrypt and, if applicable, any additional input settings required to
   perform the cipher process.
DONE 5. The input value is correctly encrypted or decrypted using the chosen cipher and the output is displayed on the
   screen.
DONE 6. Remember to include informative docstrings in your functions and/or methods.
DONE 7. Make sure to follow the PEP 8 guidelines for coding style and write organized, easy to follow code. General code
   comments are great to add to your code too.
DONE 8. Before you submit your project for review, make sure you can check off all of the items on the Student
   Project Submission Checklist. The checklist is designed to help you make sure you�ve met the grading requirements
   and that your project is complete and ready to be submitted!

---------

Extra Credit

To get an "exceeds" rating, you can expand on the project in the following ways:

2 steps

DONE 1. Implement a one time pad to secure the cipher. A one time pad is an additional input step required prior to
   encrypting and decrypting a message. As long as both the sender and receiver use the same pad,
   the message itself becomes secure. Without the pad, the message cannot be recovered.

DONE 2. Encrypted output is displayed in 5 character blocks, with padding added as required. For example if the message to
   encrypt is �The quick brown fox.� The output would be represented as something like �LFDKA NMYML K1KZE &XPQR�.